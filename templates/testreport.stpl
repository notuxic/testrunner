<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8" />
		<title>Testreport</title>
		<style>
			@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap');
			@import url('https://cdn.jsdelivr.net/npm/hack-font@3.3.0/build/web/hack.css');
			body {
				font-family: 'Roboto', sans-serif;
				font-weight: 300;
				color: #222;
				max-width: 100em;
				margin-left: auto;
				margin-right: auto;
			}
			body > h1 {
				text-align: center;
				font-size: 3em;
			}
			body > h2 {
				font-size: 1.8em;
				border-bottom: 0.1em solid #666;
				margin-top: 4em;
			}
			table {
				border-collapse: collapse;
			}
			tr:hover {
				background: #eee;
			}
			th {
				text-align: right;
			}
			th, td {
				padding-left: 1em;
				padding-right: 1em;
			}
			a {
				text-decoration: none;
			}
			.shortreport {
				margin-top: 3em;
				margin-left: auto;
				margin-right: auto;
			}
			.shortreport th, .shortreport td {
				text-align: center;
			}
			.shortreport td:first-child {
				text-align: left;
			}
			.shortreport tr:first-child th {
				border-bottom: 0.1em solid #222;
			}
			.shortreport tr:hover:first-of-type {
				background: initial;
			}
			.long_report {
				margin-top: 5em;
			}
			.long_report > div {
				margin-left: 5em;
				margin-right: 5em;
			}
			.long_report > div.description {
				margin-left: 10em;
				margin-right: 10em;
			}
			.title > h2 {
				display: flex;
				border-bottom: 0.1em dashed #444;
			}
			.shortinfo {
				margin-left: auto;
				margin-right: auto;
				margin-top: 2em;
			}
			div.shortinfo table {
				margin-left: auto;
				margin-right: auto;
			}
			.shortinfo > table th:first-of-type {
				border-right: 0.1em solid #222;
			}
			table td, table td * {
				vertical-align: top;
				horizontal-align: top;
			}
			.differences {
				background: #eee;
				margin-top: 3em;
				padding-left: 3em;
				width: initial;
			}
			.differences tr:first-of-type {
				border-bottom: 0.1em solid #222;
			}
			.differences th {
				text-align: center;
				padding: 0.5em;
			}
			.differences td {
				font-family: 'Hack', monospace;
				font-size: 0.82em;
				padding: 0.5em;
				min-width: <%= self.project_definition.diff_table_width.unwrap_or(82) %>ch;
				max-width: <%= self.project_definition.diff_table_width.unwrap_or(82) %>ch;
				word-wrap: anywhere;
				word-break: break-all;
			}
			.differences #compiler {
				min-width: 122ch;
				max-width: 122ch;
			}
			.differences td:nth-child(2), .differences th:nth-child(2) {
				border-left: 0.1em dashed #222;
			}
			.diff-add {
				background-color: #9acd32b8;
			}
			.diff-remove {
				background-color: #cd5c5cb0;
			}
			.diff-add-inline {
				background-color: #87c608;
			}
			.diff-remove-inline {
				background-color: IndianRed;
			}
			.diff-input {
				text-decoration: underline;
				text-decoration-color: #222;
				color: #666;
			}
			.diff-input-unsent {
				text-decoration: underline;
				text-decoration-color: #222;
				background-color: turquoise;
				color: #222;
			}
			.inline-code {
				background: #eee;
				font-family: 'Hack', monospace;
				font-size: 0.84em;
				font-weight: 300;
				vertical-align: baseline;
			}
			.link-summary {
				display: inline-block;
				font-size: 0.8em;
				font-weight: normal;
				vertical-align: baseline;
				margin-left: auto;
			}
			.whitespace-hint {
				color: #bbb;
			}
			.diff-add .whitespace-hint {
				color: green;
			}
			.diff-remove .whitespace-hint {
				color: darkred;
			}
			.diff-input-unsent .whitespace-hint {
				color: darkcyan;
			}
			.failed {
				width: 61em;
				margin-top: 5em;
				margin-left: auto;
				margin-right: auto;
			}
			.warning {
				font-size: large;
				background-color: #ff000033;
				color: darkred;
				padding: 0.5em;
				border-left: darkred 0.4em solid;
			}
			.success {
				color: green;
				font-family: 'Hack', monospace;
			}
			.fail {
				color: darkred;
				font-family: 'Hack', monospace;
			}
			.flex-container {
				display: flex;
				flex-direction: row;
				justify-content: center;
				align-items: center;
			}
		</style>
	</head>
	<body>
		<h1>Testreport</h1>

		<% if self.binary.info.errors.is_some() { %>
		<div class="failed">
			<span class="warning">Could not compile projectm no testcases were run!</span>
			<table class="differences">
				<tr>
					<th>Compiler Output</th>
				</tr>
				<tr>
					<td id="compiler">
						<%-
							self.binary.info.errors.clone().unwrap()
								.replace("&", "&amp;")
								.replace("<", "&lt;")
								.replace(">", "&gt;")
								.replace(" ", "&nbsp;")
								.replace("\t", "&nbsp;&nbsp;&nbsp;&nbsp;")
								.replace("\n", "<br />")
						%>
					</td>
				</tr>
			</table>
		</div>

		<% } else { %>
		<h2><a id="summary"></a>Summary</h2>
		<div class="flex-container">
			<% if self.binary.info.warnings.is_some() { %>
			<table class="shortreport">
				<tr>
					<th>Compiler Warning</th>
					<th>Occurences</th>
				</tr>
				<% for (warn, amount) in self.binary.info.warnings.as_ref().unwrap().iter() { %>
				<tr>
					<td><%= warn %></td>
					<td><%= amount %></td>
				</tr>
				<% } %>
			</table>
			<% } %>

			<div class="shortinfo">
				<table>
					<%
						let tc_all_num = self.testresults.len();
						let mut tc_all_passed = 0;
						let mut tc_public_num = 0;
						let mut tc_public_passed = 0;
						let mut tc_private_num = 0;
						let mut tc_private_passed = 0;
						self.testresults.iter().for_each(|tc| {
							if tc.protected() {
								tc_private_num += 1;
								if tc.passed() {
									tc_private_passed += 1;
									tc_all_passed += 1;
								}
							}
							else {
								tc_public_num += 1;
								if tc.passed() {
									tc_public_passed += 1;
									tc_all_passed += 1;
								}
							}
						});
						let tc_public_perc = ((tc_public_passed as f32 / tc_public_num as f32) * 10000.0).floor() / 100.0;
						let tc_private_perc = ((tc_private_passed as f32 / tc_private_num as f32) * 10000.0).floor() / 100.0;
						let tc_all_perc = ((tc_all_passed as f32 / tc_all_num as f32) * 10000.0).floor() / 100.0;
					%>
					<tr>
						<th>Public Testcases</th>
						<td><%= tc_public_passed %> / <%= tc_public_num %> (<%= tc_public_perc.to_string() %>%)</td>
					</tr>
					<tr>
						<th>Private Testcases</th>
						<td><%= tc_private_passed %> / <%= tc_private_num %> (<%= tc_private_perc.to_string() %>%)</td>
					</tr>
					<tr>
						<th>All Testcases</th>
						<td><%= tc_all_passed %> / <%= tc_all_num %> (<%= tc_all_perc.to_string() %>%)</td>
					</tr>
				</table>
			</div>
		</div>

		<table class="shortreport">
			<tr>
				<th>Name</th>
				<th>Passed</th>
				<th>Diff</th>
				<th>Exit Code</th>
				<th>Timeout</th>
				<th>Mem Usage Errors</th>
				<th>Mem Leaks</th>
				<th>Mem Analyzer Log</th>
			</tr>
			<% for tc in self.testresults.iter() { %>
			<tr>
				<td>
					<% if self.options.protected_mode && tc.protected() { %>
					<i>redacted</i>
					<% } else { %>
					<a href="#tc-<%= tc.number() %>">#<%= format!("{:0>2}", tc.number()) %>:&nbsp;<%= tc.name() %></a>
					<% } %>
				</td>
				<td>
					<%-
						if tc.passed() {
							"<span class=\"success\">&#x2714;</span>"
						}
						else {
							"<span class=\"fail\">&#x2718;</span>"
						}
					%>
				</td>
				<td>
					<%
						let distance = if tc.add_diff_distance().is_some() {
							(tc.diff_distance() + tc.add_diff_distance().unwrap()) / 2.0
						}
						else {
							tc.diff_distance()
						};
					%>
					<%= ((distance * 1000.0).floor() / 10.0).to_string() %>%
				</td>
				<td>
					<%=
						if tc.exit_code().unwrap_or(-99) == tc.expected_exit_code().unwrap_or(0) {
							"correct"
						}
						else {
							"incorrect"
						}
					%>
				</td>
				<td>
					<%=
						if tc.timeout() {
							"yes"
						}
						else {
							"no"
						}
					%>
				</td>
				<td>
					<% if self.project_definition.use_valgrind.unwrap_or(true) { %>
					<%= tc.mem_errors().unwrap_or(-1) %>
					<% } else { %>
					<i>N/A</i>
					<% } %>
				</td>
				<td>
					<% if self.project_definition.use_valgrind.unwrap_or(true) { %>
					<%= tc.mem_leaks().unwrap_or(-1) %>
					<% } else { %>
					<i>N/A</i>
					<% } %>
				</td>
				<td>
					<% if !(tc.mem_logfile().is_empty() || (self.options.protected_mode && tc.protected())) { %>
					<a target="_blank" href="<%- tc.mem_logfile() %>">Open</a>
					<% } %>
				</td>
			</tr>
			<% } %>
		</table>

		<h2>Testcases</h2>
		<%
			for tc in self.testresults.iter() {
				if !(self.options.protected_mode && tc.protected()) {
		%>
		<%- tc.get_html_entry_detailed().unwrap() %>
		<%
				}
			}
		%>

		<% } %>
	</body>
</html>

